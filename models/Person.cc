/**
 *
 *  Person.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Person.h"
#include "Department.h"
#include "Job.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::org_chart;

const std::string Person::Cols::_id = "id";
const std::string Person::Cols::_job_id = "job_id";
const std::string Person::Cols::_department_id = "department_id";
const std::string Person::Cols::_manager_id = "manager_id";
const std::string Person::Cols::_first_name = "first_name";
const std::string Person::Cols::_last_name = "last_name";
const std::string Person::Cols::_hire_date = "hire_date";
const std::string Person::primaryKeyName = "id";
const bool Person::hasPrimaryKey = true;
const std::string Person::tableName = "person";

const std::vector<typename Person::MetaData> Person::metaData_={
{"id","uint64_t","bigint unsigned",8,1,1,1},
{"job_id","uint64_t","bigint unsigned",8,0,0,1},
{"department_id","uint64_t","bigint unsigned",8,0,0,0},
{"manager_id","uint64_t","bigint unsigned",8,0,0,0},
{"first_name","std::string","varchar(50)",50,0,0,1},
{"last_name","std::string","varchar(50)",50,0,0,1},
{"hire_date","::trantor::Date","date",0,0,0,1}
};
const std::string &Person::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Person::Person(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["job_id"].isNull())
        {
            jobId_=std::make_shared<uint64_t>(r["job_id"].as<uint64_t>());
        }
        if(!r["department_id"].isNull())
        {
            departmentId_=std::make_shared<uint64_t>(r["department_id"].as<uint64_t>());
        }
        if(!r["manager_id"].isNull())
        {
            managerId_=std::make_shared<uint64_t>(r["manager_id"].as<uint64_t>());
        }
        if(!r["first_name"].isNull())
        {
            firstName_=std::make_shared<std::string>(r["first_name"].as<std::string>());
        }
        if(!r["last_name"].isNull())
        {
            lastName_=std::make_shared<std::string>(r["last_name"].as<std::string>());
        }
        if(!r["hire_date"].isNull())
        {
            auto daysStr = r["hire_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            jobId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            departmentId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            managerId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            firstName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            lastName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

Person::Person(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            jobId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            departmentId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            managerId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

Person::Person(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("job_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["job_id"].isNull())
        {
            jobId_=std::make_shared<uint64_t>((uint64_t)pJson["job_id"].asUInt64());
        }
    }
    if(pJson.isMember("department_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["department_id"].isNull())
        {
            departmentId_=std::make_shared<uint64_t>((uint64_t)pJson["department_id"].asUInt64());
        }
    }
    if(pJson.isMember("manager_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["manager_id"].isNull())
        {
            managerId_=std::make_shared<uint64_t>((uint64_t)pJson["manager_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_name"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["first_name"].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson["first_name"].asString());
        }
    }
    if(pJson.isMember("last_name"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["last_name"].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson["last_name"].asString());
        }
    }
    if(pJson.isMember("hire_date"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["hire_date"].isNull())
        {
            auto daysStr = pJson["hire_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Person::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            jobId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            departmentId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            managerId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Person::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("job_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["job_id"].isNull())
        {
            jobId_=std::make_shared<uint64_t>((uint64_t)pJson["job_id"].asUInt64());
        }
    }
    if(pJson.isMember("department_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["department_id"].isNull())
        {
            departmentId_=std::make_shared<uint64_t>((uint64_t)pJson["department_id"].asUInt64());
        }
    }
    if(pJson.isMember("manager_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["manager_id"].isNull())
        {
            managerId_=std::make_shared<uint64_t>((uint64_t)pJson["manager_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_name"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["first_name"].isNull())
        {
            firstName_=std::make_shared<std::string>(pJson["first_name"].asString());
        }
    }
    if(pJson.isMember("last_name"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["last_name"].isNull())
        {
            lastName_=std::make_shared<std::string>(pJson["last_name"].asString());
        }
    }
    if(pJson.isMember("hire_date"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["hire_date"].isNull())
        {
            auto daysStr = pJson["hire_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            hireDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const uint64_t &Person::getValueOfId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Person::getId() const noexcept
{
    return id_;
}
void Person::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Person::PrimaryKeyType & Person::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Person::getValueOfJobId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(jobId_)
        return *jobId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Person::getJobId() const noexcept
{
    return jobId_;
}
void Person::setJobId(const uint64_t &pJobId) noexcept
{
    jobId_ = std::make_shared<uint64_t>(pJobId);
    dirtyFlag_[1] = true;
}

const uint64_t &Person::getValueOfDepartmentId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(departmentId_)
        return *departmentId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Person::getDepartmentId() const noexcept
{
    return departmentId_;
}
void Person::setDepartmentId(const uint64_t &pDepartmentId) noexcept
{
    departmentId_ = std::make_shared<uint64_t>(pDepartmentId);
    dirtyFlag_[2] = true;
}
void Person::setDepartmentIdToNull() noexcept
{
    departmentId_.reset();
    dirtyFlag_[2] = true;
}

const uint64_t &Person::getValueOfManagerId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(managerId_)
        return *managerId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Person::getManagerId() const noexcept
{
    return managerId_;
}
void Person::setManagerId(const uint64_t &pManagerId) noexcept
{
    managerId_ = std::make_shared<uint64_t>(pManagerId);
    dirtyFlag_[3] = true;
}
void Person::setManagerIdToNull() noexcept
{
    managerId_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Person::getValueOfFirstName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(firstName_)
        return *firstName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Person::getFirstName() const noexcept
{
    return firstName_;
}
void Person::setFirstName(const std::string &pFirstName) noexcept
{
    firstName_ = std::make_shared<std::string>(pFirstName);
    dirtyFlag_[4] = true;
}
void Person::setFirstName(std::string &&pFirstName) noexcept
{
    firstName_ = std::make_shared<std::string>(std::move(pFirstName));
    dirtyFlag_[4] = true;
}

const std::string &Person::getValueOfLastName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(lastName_)
        return *lastName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Person::getLastName() const noexcept
{
    return lastName_;
}
void Person::setLastName(const std::string &pLastName) noexcept
{
    lastName_ = std::make_shared<std::string>(pLastName);
    dirtyFlag_[5] = true;
}
void Person::setLastName(std::string &&pLastName) noexcept
{
    lastName_ = std::make_shared<std::string>(std::move(pLastName));
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Person::getValueOfHireDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(hireDate_)
        return *hireDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Person::getHireDate() const noexcept
{
    return hireDate_;
}
void Person::setHireDate(const ::trantor::Date &pHireDate) noexcept
{
    hireDate_ = std::make_shared<::trantor::Date>(pHireDate.roundDay());
    dirtyFlag_[6] = true;
}

void Person::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Person::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "job_id",
        "department_id",
        "manager_id",
        "first_name",
        "last_name",
        "hire_date"
    };
    return inCols;
}

void Person::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getJobId())
        {
            binder << getValueOfJobId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDepartmentId())
        {
            binder << getValueOfDepartmentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getManagerId())
        {
            binder << getValueOfManagerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFirstName())
        {
            binder << getValueOfFirstName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLastName())
        {
            binder << getValueOfLastName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getHireDate())
        {
            binder << getValueOfHireDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Person::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Person::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getJobId())
        {
            binder << getValueOfJobId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDepartmentId())
        {
            binder << getValueOfDepartmentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getManagerId())
        {
            binder << getValueOfManagerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFirstName())
        {
            binder << getValueOfFirstName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLastName())
        {
            binder << getValueOfLastName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getHireDate())
        {
            binder << getValueOfHireDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Person::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJobId())
    {
        ret["job_id"]=(Json::UInt64)getValueOfJobId();
    }
    else
    {
        ret["job_id"]=Json::Value();
    }
    if(getDepartmentId())
    {
        ret["department_id"]=(Json::UInt64)getValueOfDepartmentId();
    }
    else
    {
        ret["department_id"]=Json::Value();
    }
    if(getManagerId())
    {
        ret["manager_id"]=(Json::UInt64)getValueOfManagerId();
    }
    else
    {
        ret["manager_id"]=Json::Value();
    }
    if(getFirstName())
    {
        ret["first_name"]=getValueOfFirstName();
    }
    else
    {
        ret["first_name"]=Json::Value();
    }
    if(getLastName())
    {
        ret["last_name"]=getValueOfLastName();
    }
    else
    {
        ret["last_name"]=Json::Value();
    }
    if(getHireDate())
    {
        ret["hire_date"]=getHireDate()->toDbStringLocal();
    }
    else
    {
        ret["hire_date"]=Json::Value();
    }
    return ret;
}

std::string Person::toString() const
{
    return toJson().toStyledString();
}

Json::Value Person::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJobId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfJobId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDepartmentId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfDepartmentId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getManagerId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfManagerId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFirstName())
            {
                ret[pMasqueradingVector[4]]=getValueOfFirstName();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLastName())
            {
                ret[pMasqueradingVector[5]]=getValueOfLastName();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getHireDate())
            {
                ret[pMasqueradingVector[6]]=getHireDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJobId())
    {
        ret["job_id"]=(Json::UInt64)getValueOfJobId();
    }
    else
    {
        ret["job_id"]=Json::Value();
    }
    if(getDepartmentId())
    {
        ret["department_id"]=(Json::UInt64)getValueOfDepartmentId();
    }
    else
    {
        ret["department_id"]=Json::Value();
    }
    if(getManagerId())
    {
        ret["manager_id"]=(Json::UInt64)getValueOfManagerId();
    }
    else
    {
        ret["manager_id"]=Json::Value();
    }
    if(getFirstName())
    {
        ret["first_name"]=getValueOfFirstName();
    }
    else
    {
        ret["first_name"]=Json::Value();
    }
    if(getLastName())
    {
        ret["last_name"]=getValueOfLastName();
    }
    else
    {
        ret["last_name"]=Json::Value();
    }
    if(getHireDate())
    {
        ret["hire_date"]=getHireDate()->toDbStringLocal();
    }
    else
    {
        ret["hire_date"]=Json::Value();
    }
    return ret;
}

bool Person::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("job_id"))
    {
        if(!validJsonOfField(1, "job_id", pJson["job_id"], err, true))
            return false;
    }
    else
    {
        err="The job_id column cannot be null";
        return false;
    }
    if(pJson.isMember("department_id"))
    {
        if(!validJsonOfField(2, "department_id", pJson["department_id"], err, true))
            return false;
    }
    if(pJson.isMember("manager_id"))
    {
        if(!validJsonOfField(3, "manager_id", pJson["manager_id"], err, true))
            return false;
    }
    if(pJson.isMember("first_name"))
    {
        if(!validJsonOfField(4, "first_name", pJson["first_name"], err, true))
            return false;
    }
    else
    {
        err="The first_name column cannot be null";
        return false;
    }
    if(pJson.isMember("last_name"))
    {
        if(!validJsonOfField(5, "last_name", pJson["last_name"], err, true))
            return false;
    }
    else
    {
        err="The last_name column cannot be null";
        return false;
    }
    if(pJson.isMember("hire_date"))
    {
        if(!validJsonOfField(6, "hire_date", pJson["hire_date"], err, true))
            return false;
    }
    else
    {
        err="The hire_date column cannot be null";
        return false;
    }
    return true;
}
bool Person::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Person::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("job_id"))
    {
        if(!validJsonOfField(1, "job_id", pJson["job_id"], err, false))
            return false;
    }
    if(pJson.isMember("department_id"))
    {
        if(!validJsonOfField(2, "department_id", pJson["department_id"], err, false))
            return false;
    }
    if(pJson.isMember("manager_id"))
    {
        if(!validJsonOfField(3, "manager_id", pJson["manager_id"], err, false))
            return false;
    }
    if(pJson.isMember("first_name"))
    {
        if(!validJsonOfField(4, "first_name", pJson["first_name"], err, false))
            return false;
    }
    if(pJson.isMember("last_name"))
    {
        if(!validJsonOfField(5, "last_name", pJson["last_name"], err, false))
            return false;
    }
    if(pJson.isMember("hire_date"))
    {
        if(!validJsonOfField(6, "hire_date", pJson["hire_date"], err, false))
            return false;
    }
    return true;
}
bool Person::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Person::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Department Person::getDepartment(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from department where id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *departmentId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Department(r[0]);
}

void Person::getDepartment(const DbClientPtr &clientPtr,
                           const std::function<void(Department)> &rcb,
                           const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from department where id = ?";
    *clientPtr << sql
               << *departmentId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Department(r[0]));
                    }
               }
               >> ecb;
}
Job Person::getJob(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from job where id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *jobId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Job(r[0]);
}

void Person::getJob(const DbClientPtr &clientPtr,
                    const std::function<void(Job)> &rcb,
                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from job where id = ?";
    *clientPtr << sql
               << *jobId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Job(r[0]));
                    }
               }
               >> ecb;
}
std::vector<Person> Person::getPersons(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from person where manager_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Person> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Person(row));
    }
    return ret;
}

void Person::getPersons(const DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Person>)> &rcb,
                        const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from person where manager_id = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Person> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Person(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
