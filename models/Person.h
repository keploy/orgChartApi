/**
 *
 *  Person.h (MySQL-ready)
 *  HAND-EDITED: Converted from the PostgreSQL version generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
    namespace orm
    {
        class DbClient;
        using DbClientPtr = std::shared_ptr<DbClient>;
    }
}
namespace drogon_model
{
    namespace org_chart
    {
        class Department;
        class Job;
        class Person;

        class Person
        {
        public:
            struct Cols
            {
                static const std::string _id;
                static const std::string _job_id;
                static const std::string _department_id;
                static const std::string _manager_id;
                static const std::string _first_name;
                static const std::string _last_name;
                static const std::string _hire_date;
            };

            const static int primaryKeyNumber;
            const static std::string tableName;
            const static bool hasPrimaryKey;
            const static std::string primaryKeyName;
            using PrimaryKeyType = int32_t;
            const PrimaryKeyType &getPrimaryKey() const;

            explicit Person(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;
            explicit Person(const Json::Value &pJson) noexcept(false);
            Person(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);
            Person() = default;

            /* field helpers (declarations only, definitions unchanged) */
            void updateByJson(const Json::Value &pJson) noexcept(false);
            void updateByMasqueradedJson(const Json::Value &pJson,
                                         const std::vector<std::string> &pMasqueradingVector) noexcept(false);
            static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
            static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err);
            static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
            static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err);
            static bool validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation);

            /* column accessors (declarations only) */
            const int32_t &getValueOfId() const noexcept;
            const std::shared_ptr<int32_t> &getId() const noexcept;
            void setId(const int32_t &) noexcept;

            const int32_t &getValueOfJobId() const noexcept;
            const std::shared_ptr<int32_t> &getJobId() const noexcept;
            void setJobId(const int32_t &) noexcept;

            const int32_t &getValueOfDepartmentId() const noexcept;
            const std::shared_ptr<int32_t> &getDepartmentId() const noexcept;
            void setDepartmentId(const int32_t &) noexcept;

            const int32_t &getValueOfManagerId() const noexcept;
            const std::shared_ptr<int32_t> &getManagerId() const noexcept;
            void setManagerId(const int32_t &) noexcept;

            const std::string &getValueOfFirstName() const noexcept;
            const std::shared_ptr<std::string> &getFirstName() const noexcept;
            void setFirstName(const std::string &) noexcept;
            void setFirstName(std::string &&) noexcept;

            const std::string &getValueOfLastName() const noexcept;
            const std::shared_ptr<std::string> &getLastName() const noexcept;
            void setLastName(const std::string &) noexcept;
            void setLastName(std::string &&) noexcept;

            const ::trantor::Date &getValueOfHireDate() const noexcept;
            const std::shared_ptr<::trantor::Date> &getHireDate() const noexcept;
            void setHireDate(const ::trantor::Date &) noexcept;

            static size_t getColumnNumber() noexcept { return 7; }
            static const std::string &getColumnName(size_t index) noexcept(false);

            Json::Value toJson() const;
            Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

            /* relationship helpers (declarations only) */
            void getDepartment(const drogon::orm::DbClientPtr &clientPtr,
                               const std::function<void(Department)> &rcb,
                               const drogon::orm::ExceptionCallback &ecb) const;
            void getJob(const drogon::orm::DbClientPtr &clientPtr,
                        const std::function<void(Job)> &rcb,
                        const drogon::orm::ExceptionCallback &ecb) const;
            void getPersons(const drogon::orm::DbClientPtr &clientPtr,
                            const std::function<void(std::vector<Person>)> &rcb,
                            const drogon::orm::ExceptionCallback &ecb) const;

        private:
            friend drogon::orm::Mapper<Person>;
#ifdef __cpp_impl_coroutine
            friend drogon::orm::CoroMapper<Person>;
#endif
            static const std::vector<std::string> &insertColumns() noexcept;
            void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
            const std::vector<std::string> updateColumns() const;
            void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
            void updateId(const uint64_t id); // for MySQL

            std::shared_ptr<int32_t> id_;
            std::shared_ptr<int32_t> jobId_;
            std::shared_ptr<int32_t> departmentId_;
            std::shared_ptr<int32_t> managerId_;
            std::shared_ptr<std::string> firstName_;
            std::shared_ptr<std::string> lastName_;
            std::shared_ptr<::trantor::Date> hireDate_;

            struct MetaData
            {
                const std::string colName_;
                const std::string colType_;
                const std::string colDatabaseType_;
                const ssize_t colLength_;
                const bool isAutoVal_;
                const bool isPrimaryKey_;
                const bool notNull_;
            };
            static const std::vector<MetaData> metaData_;
            bool dirtyFlag_[7] = {false};

        public:
            /* -------------------- MySQL SQL helpers ------------------- */

            static const std::string &sqlForFindingByPrimaryKey()
            {
                static const std::string sql =
                    "SELECT * FROM " + tableName + " WHERE id = ?";
                return sql;
            }

            static const std::string &sqlForDeletingByPrimaryKey()
            {
                static const std::string sql =
                    "DELETE FROM " + tableName + " WHERE id = ?";
                return sql;
            }

            /**
             * Build INSERT for MySQL
             * – Omits id (AUTO_INCREMENT)
             * – Uses '?' placeholders
             * – No RETURNING clause
             */
            std::string sqlForInserting(bool &needSelection) const
            {
                std::string sql = "INSERT INTO " + tableName + " (";
                size_t parametersCount = 0;

                auto addColumn = [&](bool dirty, const char *name)
                {
                    if (dirty)
                    {
                        sql += name;
                        sql += ',';
                        ++parametersCount;
                    }
                };

                addColumn(dirtyFlag_[1], "job_id");
                addColumn(dirtyFlag_[2], "department_id");
                addColumn(dirtyFlag_[3], "manager_id");
                addColumn(dirtyFlag_[4], "first_name");
                addColumn(dirtyFlag_[5], "last_name");
                addColumn(dirtyFlag_[6], "hire_date");

                /* close column list / open VALUES */
                if (parametersCount > 0)
                {
                    sql.back() = ')';
                    sql += " VALUES (";
                }
                else
                {
                    sql += ") VALUES (";
                }

                /* add '?' placeholders in same order */
                auto addPlaceholder = [&](bool dirty)
                {
                    if (dirty)
                        sql += "?,";
                };

                addPlaceholder(dirtyFlag_[1]);
                addPlaceholder(dirtyFlag_[2]);
                addPlaceholder(dirtyFlag_[3]);
                addPlaceholder(dirtyFlag_[4]);
                addPlaceholder(dirtyFlag_[5]);
                addPlaceholder(dirtyFlag_[6]);

                /* strip trailing comma / close */
                if (sql.back() == ',')
                    sql.back() = ')';
                else
                    sql += ')';

                needSelection = false; // use insertId()
                LOG_TRACE << sql;
                return sql;
            }
        };
    } // namespace org_chart
} // namespace drogon_model
