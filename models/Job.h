/**
 *
 *  Job.h (MySQL‑ready)
 *  HAND‑EDITED: converted from the PostgreSQL version generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
    namespace orm
    {
        class DbClient;
        using DbClientPtr = std::shared_ptr<DbClient>;
    }
}
namespace drogon_model
{
    namespace org_chart
    {
        class Person;

        class Job
        {
        public:
            struct Cols
            {
                static const std::string _id;
                static const std::string _title;
            };

            const static int primaryKeyNumber;
            const static std::string tableName;
            const static bool hasPrimaryKey;
            const static std::string primaryKeyName;
            using PrimaryKeyType = int32_t;
            const PrimaryKeyType &getPrimaryKey() const;

            explicit Job(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;
            explicit Job(const Json::Value &pJson) noexcept(false);
            Job(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);
            Job() = default;

            /* field helpers */
            void updateByJson(const Json::Value &pJson) noexcept(false);
            void updateByMasqueradedJson(const Json::Value &pJson,
                                         const std::vector<std::string> &pMasqueradingVector) noexcept(false);
            static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
            static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err);
            static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
            static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err);
            static bool validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation);

            /* column accessors */
            const int32_t &getValueOfId() const noexcept;
            const std::shared_ptr<int32_t> &getId() const noexcept;
            void setId(const int32_t &pId) noexcept;

            const std::string &getValueOfTitle() const noexcept;
            const std::shared_ptr<std::string> &getTitle() const noexcept;
            void setTitle(const std::string &pTitle) noexcept;
            void setTitle(std::string &&pTitle) noexcept;

            static size_t getColumnNumber() noexcept { return 2; }
            static const std::string &getColumnName(size_t index) noexcept(false);

            Json::Value toJson() const;
            Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

            /* relationship helpers */
            void getPersons(const drogon::orm::DbClientPtr &clientPtr,
                            const std::function<void(std::vector<Person>)> &rcb,
                            const drogon::orm::ExceptionCallback &ecb) const;

        private:
            friend drogon::orm::Mapper<Job>;
#ifdef __cpp_impl_coroutine
            friend drogon::orm::CoroMapper<Job>;
#endif
            static const std::vector<std::string> &insertColumns() noexcept;
            void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
            const std::vector<std::string> updateColumns() const;
            void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
            void updateId(const uint64_t id); // for MySQL

            std::shared_ptr<int32_t> id_;
            std::shared_ptr<std::string> title_;

            struct MetaData
            {
                const std::string colName_;
                const std::string colType_;
                const std::string colDatabaseType_;
                const ssize_t colLength_;
                const bool isAutoVal_;
                const bool isPrimaryKey_;
                const bool notNull_;
            };
            static const std::vector<MetaData> metaData_;
            bool dirtyFlag_[2] = {false};

        public:
            /* ---------------- MySQL SQL snippets ---------------------- */

            /* select by PK */
            static const std::string &sqlForFindingByPrimaryKey()
            {
                static const std::string sql =
                    "SELECT * FROM " + tableName + " WHERE id = ?";
                return sql;
            }

            /* delete by PK */
            static const std::string &sqlForDeletingByPrimaryKey()
            {
                static const std::string sql =
                    "DELETE FROM " + tableName + " WHERE id = ?";
                return sql;
            }

            /**
             * Build INSERT (MySQL):
             *   – omit id (AUTO_INCREMENT)
             *   – use ? placeholders
             *   – no RETURNING
             */
            std::string sqlForInserting(bool &needSelection) const
            {
                std::string sql = "INSERT INTO " + tableName + " (";
                size_t parametersCount = 0;

                if (dirtyFlag_[1]) // title
                {
                    sql += "title,";
                    ++parametersCount;
                }

                if (parametersCount > 0)
                {
                    sql.back() = ')';
                    sql += " VALUES (";
                }
                else
                {
                    sql += ") VALUES (";
                }

                if (dirtyFlag_[1])
                    sql += "?,";

                if (sql.back() == ',')
                    sql.back() = ')';
                else
                    sql += ')';

                needSelection = false; // use insertId() instead of RETURNING
                LOG_TRACE << sql;
                return sql;
            }
        };
    } // namespace org_chart
} // namespace drogon_model
